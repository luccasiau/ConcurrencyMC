-- This is an SMV model of a two-process mutual exclusion program.

-- The code for the mutual exclusion program is as follows:
-- Global variables:  n1, n2, both initialized to 0.
-- Process P1
--	1: n1 = 1
--	2: if n2=3 goto 2	-- Wait for counter to get reset
--	3: n1 = n2+1;
--	4: if (n2!=0)&(n2<n1) goto 4	-- waiting for critical section
--	5: /* this line is the critical section */
--	6: n1 = 0
--	7: goto 1
-- Process P2
--	1: n2 = 1
--	2: if n1=3 goto 2	-- Wait for counter to get reset
--	3: n2 = n1+1;
--	4: if (n1!=0)&(n1<n2) goto 4	-- waiting for critical section
--	5: /* this line is the critical section */
--	6: n2 = 0
--	7: goto 1

-- Your job is to determine whether the solution is correct.
-- Each numbered line executes atomically.
-- The next process to execute a statement is chosen non-deterministically.
-- You should assume that each process gets to execute infinitely often.
-- You should assume that no process stays in its critical section forever.
-- The two processes must never be in the critical section at the same time.
-- Any process that is waiting to enter the critical section must eventually
--	enter the critical section.


MODULE main
VAR
	n1: 0..10;	-- global flag variables
	n2: 0..10;
	p1: process a_process(n1,n2);
	p2: process a_process(n2,n1);
ASSIGN
	init(n1) := 0;
	init(n2) := 0;

-- Processes must start infinitely often
FAIRNESS p1.running = TRUE;
FAIRNESS p2.running = TRUE;

-- Processes cannot stay in critical section forever
FAIRNESS (p1.line != 5);
FAIRNESS (p2.line != 5);

-- Processes cannot both enter critical section simultaneously
CTLSPEC AG(p1.line != 5 | p2.line != 5);

-- All those who wait must reach the critical section
CTLSPEC (AG (p1.line=4 -> (AF p1.line=5)));
CTLSPEC (AG (p2.line=4 -> (AF p2.line=5)));

MODULE a_process(myflag, otherflag)
	-- "process" is an SMV keyword, so I need a different name
VAR
	line: 1..7;	-- Tells which line of code we're executing
ASSIGN
	init(line) := 1;
	-- This assignment tells me which line I execute next
	next(line) :=
		case
			(line=1) | (line=3) : line+1;
			(line=2) & (otherflag=10) : 2;
			(line=2) : 3;	-- otherwise, go to next line
			(line=4) & !(otherflag=0) & (otherflag<myflag) : 4;
			(line=4) : 5;	-- otherwise, go to next line
			-- the next two lines indicates that the process can
			-- spend an arbitrary amount of time in the critical
			-- section, and just after it.
			(line=5) : {5,6};
			(line=6) : {6,7};
			(line=7) : 1;
		esac;
	-- The next assignments change the flags if we're executing the
	-- appropriate line.
	next(myflag) :=
		case
			(line=1) : 1;
			(line=3) : (otherflag+1) mod 11;
			(line=6) : 0;
			TRUE : myflag;	-- default case
		esac;
	next(otherflag) := otherflag;	-- I don't change it.
  --CTLSPEC AG (myflag != 0 | otherflag != 0);
