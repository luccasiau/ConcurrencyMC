--------------------------------- INTRODUCTION ---------------------------------
-- Szymanski's algorithm:
-- Source: https://en.wikipedia.org/wiki/Szyma%C5%84ski%27s_algorithm# 
--
-- Global variables:
-- -- flag: array of 0..4 initialized to {0, 0, 0, 0}  TODO: Check this.
--
-- Szymanski's lock process
-- Process P_id
-- -- 01: flag[p_id] := 1
-- -- 02: if (max(flag[0], flag[1], flag[2], flag[3]) >= 3) goto 2
-- -- 03: flag[p_id] := 3
-- -- 04: if (flag[0] == 1 | flag[1] == 1 | flag[2] == 1 | flag[3] == 1):
-- -- -- -- 05: flag[p_id] = 2
-- -- -- -- 06: if max(flag[0], flag[1], flag[2], flag[3]) <= 3): goto 6
-- -- 07: flag[p_id] := 4
-- -- 08: // Await for everyone with lower id to finish exit protocol
-- -- -- if (p_id > 0 & flag[0] > 1) | (p_id > 1 & flag[1] > 1) |
-- -- -- -- (p_id > 2 & flag[2] > 1): goto 8
-- -- 09: /* critical section */
-- -- 10: if (p_id < 1 & (flag[1] == 2 | flag[1] == 3)) |
-- -- -- -- (p_id < 2 & (flag[2] == 2 | flag[2] == 3)) |
-- -- -- -- (p_id < 3 & (flag[3] == 2 | flag[3] == 3)): goto 10
-- -- 11: flag[p_id] := 0
-- -- 12: goto 1 (start process again)
--------------------------------------------------------------------------------

------------------------------------ MAIN --------------------------------------
MODULE main
VAR
  flag: array 0..3 of 0..4;
  p0: process szymanski(0, flag);
  p1: process szymanski(1, flag);
  p2: process szymanski(2, flag);
  p3: process szymanski(3, flag);
ASSIGN
  init(flag[0]) := 0;
  init(flag[1]) := 0;
  init(flag[2]) := 0;
  init(flag[3]) := 0;
--------------------------------------------------------------------------------

------------------------------- ALL CONSTRAINTS --------------------------------
-- Processes must start infinitely often
FAIRNESS p0.running = TRUE;
FAIRNESS p1.running = TRUE;
FAIRNESS p2.running = TRUE;
FAIRNESS p3.running = TRUE;

-- Processes cannot stay in the critical section forever
FAIRNESS (p0.line != 9);
FAIRNESS (p1.line != 9);
FAIRNESS (p2.line != 9);
FAIRNESS (p3.line != 9);

-- No two processes can enter the critical section simultaneously
CTLSPEC AG((p0.line != 9) | (p1.line != 9) | (p2.line != 9) | (p3.line != 9));

-- Avoid process starvation (Every process that starts reaches critical section)
CTLSPEC AG((p0.line=1) -> (AF(p0.line=9)));
CTLSPEC AG((p1.line=1) -> (AF(p1.line=9)));
CTLSPEC AG((p2.line=1) -> (AF(p2.line=9)));
CTLSPEC AG((p3.line=1) -> (AF(p3.line=9)));
--------------------------------------------------------------------------------

---------------------------------- PROCESS -------------------------------------
MODULE szymanski(p_id, flag)
VAR
  line: 1..12;
ASSIGN
  init(line) := 1;

  next(line) :=
    case
      (line=1) : 2;
      (line=2) & (max(flag[0], max(flag[1], max(flag[2], flag[3]))) >= 3): 2;
      (line=2) : 3;
      (line=3) : 4;
      (line=4) & ((flag[0]=1) | (flag[1]=1) | (flag[2]=1) | (flag[3]=1)) : 5;
      (line=4) : 7;
      (line=5) : 6;
      (line=6) & (max(flag[0], max(flag[1], max(flag[2], flag[3]))) <= 3) : 6;
      (line=6) : 7;
      (line=7) : 8;
      (line=8) & ((p_id>0 & flag[0]>1) | (p_id>1 & flag[1]>1) |
                  (p_id>2 & flag[2]>1)) : 8;
      (line=8) : 9;
      (line=9) : {9, 10}; -- spend as much time as intended in the crit. sec.
      -- exit protocol
      (line=10) & ((p_id<1 & (flag[1]=2 | flag[1]=3)) |
                   (p_id<2 & (flag[2]=2 | flag[2]=3)) |
                   (p_id<3 & (flag[3]=2 | flag[3]=3))) : 10;
      (line=10) : 11;
      (line=11) : {11, 12}; -- spend as much time as intended
      (line=12) : 12; -- Gets stuck on the last line because it's done 
    esac;

  next(flag[p_id]) :=
    case
      (line=1) : 1;
      (line=3) : 3;
      (line=5) : 2;
      (line=7) : 4;
      (line=11) : 0;
      TRUE : flag[p_id]; -- not change it
    esac;
--------------------------------------------------------------------------------
